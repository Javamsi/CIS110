program decode2
// Input:    
// Output:   
// Remarks:  
// -----------------------------------------------------------------------------
program decode
// Vamsi Jandhayala  
// javamsi
//
// November 1, 2012
//
//Objective: The purpose of this program is to decode the encoded sequence of 7 
//bits from the original 4 bits. It identifies an error in the sequence by 
//checking the parity values and then fixes the error to return the original 
//sequence of 4 bits. 
//
//Input: javac TOY.java
//java lfsr.toy < decode3.txt
//
//Output: 
//0001
//0001
//0000
//0001
//0001
//0001
//0001
//0000
//0001
//0001
//0001
//0001
//FFFF
// -----------------------------------------------------------------------------
10: 8AFF   read R[A]                     //m1
11: 7101   R[1] <- 0001                  
12: 17A1   R[7] <- R[A] + R[1]            
13: C739   if (R[7] == 0) goto 39        //Check condition read in FFFF
14: 8BFF   read R[B]                     //m2
15: 8CFF   read R[C]                     //m3
16: 8DFF   read R[D]                     //m4
17: 82FF   read R[2]                     //p1 Read in
18: 83FF   read R[3]                     //p2 Read in
19: 84FF   read R[4]                     //p3 Read in                  

1A: 47AB   R[7] <- R[A] ^ R[B]           //p1 Actual
1B: 477D   R[7] <- R[7] ^ R[D]             

1C: 48AC   R[8] <- R[A] ^ R[C]           //p2 Actual
1D: 488D   R[8] <- R[8] ^ R[D]             

1E: 49BC   R[9] <- R[B] ^ R[C]           //p3 Actual
1F: 499D   R[9] <- R[9] ^ R[D]             

20: 4E27   R[E] <- R[2] ^ R[7]           //c1 = p1 Read in ^ p1 Actual
21: 4538   R[5] <- R[3] ^ R[8]           //c2 = p2 Read in ^ p2 Actual
22: 4649   R[6] <- R[4] ^ R[9]           //c3 = p3 Read in ^ p3 Actual
     
23: 12E5   R[2] <- R[E] + R[5]             
24: 1226   R[2] <- R[2] + R[6]           // if(c1 + c2 + c3 == 3) 
25: 7703   R[7] <- 0003                   m4 = m4 ^ 1
26: 2727   R[7] <- R[2] - R[7]            
27: C73C   if (R[7] == 0) goto 3C           
            
28: 13E5   R[3] <- R[E] + R[5]           // if(c1 + c2  == 2)
29: 7702   R[7] <- 0002                   m1 = m1 ^ 1
2A: 2737   R[7] <- R[3] - R[7]            
2B: C73E   if (R[7] == 0) goto 3E            

2C: 14E6   R[4] <- R[E] + R[6]           // if(c1 + c3 == 2)
2D: 7702   R[7] <- 0002                   m2 = m2 ^ 1 
2E: 2747   R[7] <- R[4] - R[7]             
2F: C740   if (R[7] == 0) goto 40             
        
30: 1F56   R[F] <- R[5] + R[6]           // if(c2 + c3 == 2)
31: 7702   R[7] <- 0002                   m3 = m3 ^ 1 
32: 27F7   R[7] <- R[F] - R[7]             
33: C742   if (R[7] == 0) goto 42                
    
34: 9AFF   write R[A]                              
35: 9BFF   write R[B]                               
36: 9CFF   write R[C]                             
37: 9DFF   write R[D]                                                                
38: C010   goto 10                                  
          
39: 2771   R[7] <- R[7] - R[1]           
3A: 97FF   write R[7]                         
3B: 0000   halt                             

3C: 4DD1   R[D] <- R[D] ^ R[1]           // m4 = m4 ^ 1     
3D: C028   goto 28                               
3E: 4AA1   R[A] <- R[A] ^ R[1]           // m1 = m1 ^ 1       
3F: C02C   goto 2C                                
40: 4BB1   R[B] <- R[B] ^ R[1]           // m2 = m2 ^ 1      
41: C030   goto 30                                
42: 4CC1   R[C] <- R[C] ^ R[1]           // m3 = m3 ^ 1     
43: C034   goto 34        
