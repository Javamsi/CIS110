program LFSR
//lfsr.toy
//Vamsi Jandhayala
//
//October 31, 2012
//
//PennKey: javamsi
//Recitation: 207
//
//Objective: Takes a encrypted image and decrypts it and vice versa using an 
//lfsr. The purpose is to X'or the inital and tap bit as well as X'or the read
//in bit with the random bit generated which is then printed to StdOut. Using 
//the java programs TOY.java, TOYtoImage.java, and ImageToTOY.java, lfsr.toy 
//take in a series of StdIn values and performs an lfsr, from which the StdOut  
//values are used.
//
//Usage: 
//             Input: (command line)
// % javac TOY.java
// % javac TOYToImage.java
// % javac ImageToTOY.java
//
// For decrypted pipe image:
java ImageToTOY TOYXpipe.png 01101000010 8 | java TOY lfsr.toy | java TOYToImage
// For encrypted pipe image:
java ImageToTOY TOYPipe.png 01101000010 8 | java TOY lfsr.toy | java TOYToImage
//
//                    Output: 
//Outputs the decrypted/encrypted image in a separate window
// -----------------------------------------------------------------------------

//R[A] Seed length
//R[B] Initial Seed
//R[C] Tap Position 8
//R[D] First word
//R[E] Second word
//R[F] Reads in each word from Stdin
//R[1] Constant Value of 1
//R[3] Constant value of 1
//R[4] Used in relation with R[6] 
//R[6] Used to stop the lfsr loop when FFFF is read in
//R[7] Takes the initial bit of the seed
//R[8] Takes the tap bit of the seed
//R[9] Stores the X'OR bit of initial and tap

10: 8AFF   read R[A]                     // Read and write the initial 5 
11: 8BFF   read R[B]                     inputs for seed length, seed, 
12: 8CFF   read R[C]                     tap position, first word, and 
13: 8DFF   read R[D]                     second word.
14: 8EFF   read R[E]                     

15: 9AFF   write R[A]                     
16: 9BFF   write R[B]                     
17: 9CFF   write R[C]                     
18: 9DFF   write R[D]                    
19: 9EFF   write R[E]                    
              

1A: 9A01   mem[01] <- R[A]               //Store the seed length in memory
1B: 8201   R[2] <- mem[01]               //Load value at memory 01 to R[1]
1C: 7101   R[1] <- 0001                    

1D: 9B03   mem[03] <- R[B]                             
1E: 8503   R[5] <- mem[03]                  
1F: 7301   R[3] <- 0001                  //Take a register R[4] that considers 
20: 2403   R[4] <- -R[3]                 the value 0xFFFF for the loop to stop                    
21: 7601   R[6] <- 0001                                   
22: 2AA1   R[A] <- R[A] - R[1]           //The right shift magnitude for inital 
                                         seed.

//Loop that reads in R[F] until it reaches FFFF
23: C636   if (R[6] == 0) goto 36             
24: 8FFF   read R[F]                      //Read in the word        
25: 9F01   mem[01] <- R[F]                //Store R[F] in memory location 01     
26: 8601   R[6] <- mem[01]                //mem[01] loaded onto R[6]      

27: 9B04   mem[04] <- R[B]                 //Store the inital seed into memory
28: 9B05   mem[05] <- R[B]                 04 and 05.       
                
//Extract the initial bit
29: 8704   R[7] <- mem[04]                                        
2A: 677A   R[7] <- R[7] >> R[A]           //Right shift to extract the initial          
2B: 3771   R[7] <- R[7] & R[1]             bit        

//Extract the 8th bit 
2C: 8805   R[8] <- mem[05]                           
2D: 688C   R[8] <- R[8] >> R[C]           //Right shift to extract the 8th bit            
2E: 3881   R[8] <- R[8] & R[1]                     

//Xor the initial bit and 8th bit
2F: 4978   R[9] <- R[7] ^ R[8]                     

//Shift the register to the left one bit and add the X'OR bit
30: 5BB1   R[B] <- R[B] << R[1]                     
31: 1BB9   R[B] <- R[B] + R[9]                                
32: 499F   R[9] <- R[9] ^ R[F]            //X'or the read in bit with the random   
                                          //bit

33: 99FF   write R[9]                     //Write the X'OR bit to Stdout         

34: 2664   R[6] <- R[6] - R[4]                                                     
35: C023   goto 23                         //Loop                       
36: 0000   halt                                                                     